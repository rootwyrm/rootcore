#!/bin/sh
# Copyright (C) 2014-* Phillip R. Jaenke, All Rights Reserved
# NOT FOR SALE OR REDISTRIBUTION WITHOUT EXPRESS WRITTEN CONSENT

log() {
	if [ -z "$1" ]; then
		## No message.
		logger -t rpz -p user.warn "$$: log() no message"
		return 0
	fi
	
	case $2 in 
		d)
			logger -t rpz -p user.debug "RPZ DEBUG: $1"
			return $$
			;;
		m)
			logger -t rpz -p user.notice "RPZ: $1"
			return $$
			;;
		w)
			logger -t rpz -p user.warn "RPZ: WARNING: $1"
			return $$
			;;
		e)
			if [ -z $3 ]; then
				3=255
			fi
			logger -t rpz -p user.err "RPZ: ERROR: $1 [RC $3]"
			exit $3
			;;
	esac
}

bind_header_generate() {
	if [ -z $1 ]; then
		log "BIND: header_generate: called without output filename" e 1
	fi
	if [ -z $2 ]; then
		log "BIND: header_generate: called without SOA argument" e 1
	fi
	serialfmt=$(date '+%m%d%y%H%M')
	## CAUTION: ^v^i (indent) NOT spaces.
	if [ -z $3 ]; then
		echo '$TTL 1H' > $1
	else
		echo '$TTL '$3'' > $1
	fi
	echo "@ IN SOA	$2.	hostmaster.$2. ( $serialfmt 1H 15m 1w 2h )" >> $1
	echo "	IN NS	localhost.$2." >> $1
	echo "" >> $1
	echo ";; Generated by $0 on `date`" >> $1
	echo "" >> $1

	return 0
}

bind_restart() {
	# Have to deal with the stupidity that is startup scripts...
	/usr/local/etc/rc.d/named restart
	if [ $? -eq 0 ]; then
		return 0
		break
	fi
	/usr/local/sbin/rndc stop
	if [ $? -ne 0 ]; then
		/usr/local/etc/rc.d/named stop
		if [ $? -ne 0 ]; then
			# Force the issue.
			kill -9 `ps ax | grep named | grep -v grep | awk '{print $1}'`
		fi
	fi
	/usr/local/etc/rc.d/named start
	return $?
}

bind_refresh() {
	# This only refreshes zones.
	if [ -z $1 ]; then
		log "CONTROL: bind_refresh() did not get zone to refresh." w
		return 1
	fi
	## Argument $2 is only for class.
	/usr/local/sbin/rndc refresh zone $2 $1 > /dev/null 2>&1
	return $?
}

bind_reload_zone() {
	# This only reloads zones.
	if [ -z $1 ]; then
		log "CONTROL: bind_reload_zone() did not get zone to reload." w
		return 1
	fi
	## Argument $2 is only for class.
	/usr/local/sbin/rndc reload $2 $1 > /dev/null 2>&1
	return $?
}

bind_resign_zone() {
	## This is for resigning DNSSEC zones
	if [ -z $1 ]; then
		log "CONTROL: bind_resign_zone() did not get zone to sign." w
		return 1
	fi
	/usr/local/sbin/rndc sign zone $1 > /dev/null 2>&1
	return $?
}

csum_generate() {
	if [ -z $1 ]; then
		log "CONTROL: csum_generate() did not get input file."
	fi
	md5="$1.md5"
	sha256="$1.sha256"
	if [ -f $md5 ]; then
		## Just get it out of the way.
		mv $md5 "$md5".last
	fi
	/sbin/md5 -q $1 > $md5
	if [ -f $sha256 ] ; then
		## Just get it out of the way.
		mv $sha256 "$sha256".last
	fi
	/sbin/sha256 -q $1 > $sha256
	if [ ! -z $2 ]; then
		case $2 in 
			overwrite)
				if [ -f $md5.last ]; then
					rm $md5.last
				fi
				if [ -f $sha256.last ]; then
					rm $sha256.last
				fi
				;;
			preserve)
				## Do nothing.
				;;
		esac
	fi
}

csum_check() {
	if [ -z $1 ]; then
		log "CONTROL: csum_check() did not get comparison source." e 99
	fi
	if [ -z $2 ]; then
		log "CONTROL: csum_check() did not get file to compare to." e 99
	fi
	md5="'$1'.md5"
	sha256="'$1'.sha256"

	t_md5src=$(cat $md5)
	t_md5dst=$(md5 -q $2)
	if [ $t_md5src -ne $t_md5dst ]; then
		log "CONTROL: csum_check: $1 $t_md5src $2 $t_md5dst" d
		return 1
		break
	fi
	t_sha256src=$(cat $sha256)
	t_sha256dst=$(sha256 -q $2)
	if [ $t_sha256src -ne $t_sha256dst ]; then
		log "CONTROL: csum_check: $1 $t_sha256src $2 $t_sha256" m
		return 1
		break
	fi
	return 0
}

## Transform Functions
tf_hostfile_to_domain() {
	## For hostfile format, e.g. 
	## 127.0.0.1 bananarama.com
	if [ -z $1 ]; then
		log "TRANSFORM: tf_hostfile_to_domain did not recieve input file." e 10
	fi
	if [ -z $2 ]; then
		log "TRANSFORM: tf_hostfile_to_domain did not recieve output file." e 10
	fi
	## cat : strip comments : convert entries
	cat $1 | sed -e '/^#/d' | sed -e 's/$//' | grep 127 | awk '{print $2}' | \
	#cat $1 | grep -v '^#' | sed -e 's/$//' | grep 127 | awk '{print $2}' | \
		while read line ; \
		do \
			echo "$line" ; \
		done >> $2
}

#tf_fqdn_to_domain() {
	## Convert FQDNs to Domains for uniq processing.
	## TODO: NYI
#}

tf_domain_to_rpz() {
	## Convert domain output file into usable RPZ entries.
	if [ -z $1 ]; then
		log "TRANSFORM: tf_domain_to_rpz did not receive input file." e 10
	fi
	if [ -z $2 ]; then
		log "TRANSFORM: tf_domain_to_rpz did not receive output file." e 10
	fi
	if [ -z $3 ]; then
		log "TRANSFORM: tf_domain_to_rpz did not receive rule." e 10
	fi

	## cat : strip comments : strip cr : convert entries
	cat $1 | sed -e '/^#/d' | sed -e 's/$//' | awk '{print $1}' | \
	#cat $1 | grep -v '^#' | sed -e 's/$//' | awk '{print $1}' | \
		while read line ; \
		do  
			## Double ^v^i
			echo "$line		IN CNAME $3" ; \
			echo "*.$line		IN CNAME $3" ; \
		done >> $2
}

tf_hostfile_domain() {
	## For hostfile format, e.g.
	## 127.0.0.1 bananarama.com
	if [ -z $1 ]; then
		log "TRANSFORM: tf_hostfile_domain did not receive input file." e 10
	fi
	if [ -z $2 ]; then
		log "TRANSFORM: tf_hostfile_domain did not receive output file." e 10
	fi
	if [ -z $3 ]; then
		log "TRANSFORM: tf_hostfile_domain did not receive rule!"
	fi

	## cat -> strip comments -> print entries 
	cat $1 | sed -e '/^#/d' | awk '{print $1}' | sed -e 's,,,' | \
	#grep -v '^[^\.]*\.[^\.]*\.' | sed -e 's,,,' | \
		while read line ; \
		do 
			## NOTE: 2x ^v^i
			echo "$line		IN CNAME $3" ; \
			echo "*.$line		IN CNAME $3" ; \
		done >> $2
}

tf_hostfile_host() {
	## For hostfile format, e.g.
	## 127.0.0.1 bananarama.com
	if [ -z $1 ]; then
		log "TRANSFORM: tf_hostfile_domain did not receive input file." e 10
	fi
	if [ -z $2 ]; then
		log "TRANSFORM: tf_hostfile_domain did not receive output file." e 10
	fi
	if [ -z $3 ]; then
		log "TRANSFORM: tf_hostfile_domain did not receive rule!"
	fi

	## cat -> strip comments -> get ips -> print entries -> extract 3 parters
	cat $1 | sed -e '/^#/d' | grep 127 | awk '{print $2}' | grep -v '^[^\.]*\.[^\.]*\.' | sed -e 's,,,' | \
		while read line ; \
		do \
			## NOTE: 2x ^v^i
			echo "$line		IN CNAME $3" ; \
			## CAUTION: CATCH SUBDOMAINS TOO.
			echo "*.$line		IN CNAME $3" ; \
		done >> $2
}

tf_rpzfile_combined() {
	## For RPZ File Format, e.g.
	## RULE: IN CNAME capture.dragonnorth.int.
	## domainname.com
	## host.domainname.com
	 if [ -z $1 ]; then
		 log "TRANSFORM: tf_rpzfile_host did not receive input file." e 10
		 break
	 fi
	 if [ -z $2 ]; then
		 log "TRANSFORM: tf_rpzfile_host did not receive output file." e 10
		 break
	 fi
	 if [ -z $3 ]; then
		 rule=$(grep '^RULE' $1 | cut -d : -f 2)
	 else
		 rule="IN CNAME $3"
	 fi

	 #cat $1 | grep -v "^#" | awk '{print $1}' | grep "^[^\.]*\.[^\.]*\." | \
	 cat $1 | grep -v "^#" | awk '{print $1}' | \
		 while read line ; \
		 do
		 	echo "$line		$rule" ; \
			echo "*.$line		$rule" ;\
		done >> $2
}

######################################################################
# For use with pgl.yoyo.org plaintext
# http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext
# Extract domains
yoyo_domain() {
	# Return only top level domains
	#if [ -z $1 ]; then
	#	## Didn't get passed a file argument.
	#	log "TRANSFORM: yoyo_domain() called without filename" w
	#	return 1
	#fi
	## Clean up in advance.
	if [ -f /tmp/bind/yoyo_domain ]; then
		rm /tmp/bind/yoyo_domain
	fi
	cat $1 | grep 127 | awk '{print $2}' | grep -v "^[^\.]*\.[^\.]*\." | \
		while read line ; \
		do \
		echo "$line	IN CNAME *." ; \
		echo "*.$line	IN CNAME *." ; \
	done > /tmp/bind/yoyo_domain
}

# Extract three-and-four part hosts
yoyo_host() {
	# Return only FQDNs which have to be formatted differently.
	#if [ -z $1 ]; then
	#	## Didn't get passed a file argument.
	#	log "TRANSFORM: yoyo_host() called without filename" w
	#	return 1
	#fi
	## Clean up in advance.
	if [ -f /tmp/bind/yoyo_host ]; then
		rm /tmp/bind/yoyo_host
	fi
	cat $1 | grep 127 | awk '{print $2}' | grep "^[^\.]*\.[^\.]*\." | \
		while read line ; \
		do \
			echo "$line	IN CNAME *." ; \
		done > /tmp/bind/yoyo_domain
}

yoyo_output() {
	# MUST have an output argument
	if [ -z $1 ]; then
		## Didn't get one.
		log "OUTPUT: yoyo_output() called without output filename" e 10
	fi
	bind_header_generate $1 $2
	yoyo_domain
	yoyo_host
	cat /tmp/bind/yoyo_domain >> $1
	cat /tmp/bind/yoyo_host >> $1
	## Fix permissions.
	chown $dnsuser:$dnsgrp $1
}
